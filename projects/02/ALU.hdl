// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not1To16(in=zx,out=finalzx); //Converte zx em 16 bits e o inverte
    Not1To16(in=zy,out=finalzy); //Converte zy em 16 bits e o inverte
    And16(a=x,b=finalzx,out=resultx); //Verifica se x deve ser zerado
    And16(a=y,b=finalzy,out=resulty); //Verifica se y deve ser zerado
    Xor16To1(a=resultx,b=nx,out=finalx); //Caso nx seja positivo o valor de x é invertido
    Xor16To1(a=resulty,b=ny,out=finaly); //Caso ny seja positivo o valor de y é invertido
    And16(a=finalx,b=finaly,out=andout); //x & y
    Add16(a=finalx,b=finaly,out=sumout); //x + y
    Mux16(a=andout,b=sumout,sel=f,out=saida); //Utiliza f para verificar a operação desejada pelo usuário
    Xor16To1(a=saida,b=no,out=output); //Caso no seja positivo o valor de out é invertido
    Value16(in=output,out=out); //Passa o valor correto para a saída
    Or16Way(in=output,out=reversezr); //Verifica se tem um 1 em qualquer número da saída
    Not(in=reversezr,out=zr); //Reverte o valor conseguido no último
    IfNegative(in=output,out=ng); //Verifica o primeiro dígito da saída, para ver se ele é negativo
}
